{
    "collab_server" : "",
    "contents" : "rm(list=ls(all=TRUE))\n\n# Include source from R files\nsource(\"R/preprocess.R\")\nsource(\"R/Utils.R\")\n#source(\"R/const.R\")\n\nprint(paste(\"Current Working directory:\",getwd()))\n\n# Location of stock data folder\ndata_path = paste(getwd(),\"data\",sep=\"/\")\n\n\nall_script_list = c(\"BAJFINANCE.csv\", \"CADILAHC.csv\", \"HDFC.csv\", \"IOC.csv\", \"LT.csv\",\n                    \"RELIANCE.csv\", \"TATAMOTORS.csv\", \"TITAN.csv\", \"BHARATFORG.csv\",\n                    \"HAVELLS.csv\", \"HINDZINC.csv\", \"ITC.csv\", \"MOTHERSUMI.csv\",\n                    \"SHREECEM.csv\", \"TORNTPHARM.csv\", \"BRITANNIA.csv\", \"HDFCBANK.csv\", \"INFY.csv\",\n                    \"PIDILITIND.csv\", \"TCS.csv\")\nstart_date = \"2012-01-02\"\n# Historical Stock price End date\nend_date = \"2016-12-31\"\n\n# Investment period in years, default = 5 years starting from 2012 to 2016.\ninvest_period = 5\n\ncomp_all_stocks_return = function(all_script_list) {\n  stocks_ret = list()\n  for(script in all_script_list) {\n    script_path = paste(data_path,script,sep=\"/\")\n    script_name = sub(\".csv\",\"\",script)\n    stock_data = proc_stock_data(script_path)\n    ret = comp_stock_return(script, stock_data, start_date, end_date, invest_period)\n    stocks_ret[script_name]<-ret$CARG\n  }\n  return(stocks_ret)\n}\nstocks_return = comp_all_stocks_return(all_script_list)\n\n# Pick Top best performin stocks by CARG\nport_stocks_data <- unlist(stocks_return[order(unlist(stocks_return), decreasing=TRUE)][1:5])\n\nstocks_data <- data.frame(stocks = names(port_stocks_data),returns = round(port_stocks_data,2))\nmin_investment = 0.10\namount = 150000\nstopping_criteria = 8000\nweight_limit = 1\n\n1/5\n\n# Min inviestment is 10% on each stocks in portfolio\nmin_investment = 0.10\n# Max inviestment is not more than 30% on each stock in portfolio\nmax_investment = 0.30\n\n# Max return initialzed with 15% return and later this gets computed by algoritham\nmax_portfolio_return = (amount*0.15)\n\n\ninit_soln_fn <- function(){\n  # Let us initiate solution with almost equal weights to make it total 1\n  initial_soln = c(0.20, 0.20, 0.20, 0.20, 0.20)\n  return(initial_soln)\n}\n\n\n\n# Purterbation function: randomly select a point and do operation\npurterb_fn = function(solution){\n  idx = sample(1:length(solution), 2)\n  purt_solution = solution\n  x = solution[idx[1]]\n  y = solution[idx[2]]\n\n  # Taking the diff of 1st stock weight and 0.10 and take half of it\n  # Subtract that value and the same value to the secnd stock weight\n  # (As total should be 1)\n\n  diff = ((solution[idx[1]] - min_investment)/2)\n  purt_solution[idx[1]] = solution[idx[1]] - diff\n  purt_solution[idx[2]] = solution[idx[2]] + diff\n\n  return(purt_solution)\n}\n\n# Evaluation function.\nevaluate_fn = function(stocks_data, weight_limit, solution, amount) {\n  #single_script_invest = (solution * rep(amount, length(solution)))\n\n  #total_return = stocks_data$returns %*% single_script_invest\n\n  # Calculate portfolio actual return amount for equal contribution on each stock.\n  portfolio_return = (stocks_data$returns %*%\n                        (solution * amount))/100\n  # Calculate portfolio return in % for equal contribution on each stock.\n  #portfolio_return_in_percentage = (portfolio_return/amount)*100\n\n  if (round(sum(solution), 1) != weight_limit)\n    return(0)\n  else\n    return(portfolio_return)\n}\nrun_simulated_annealing_algo = function(max_iterations, amount){\n  cat(\"Max iterations =\", max_iterations, \"\\n\")\n  # Generate a random solution\n  initial_soln = init_soln_fn()\n  initial_investment_amount = evaluate_fn(stocks_data , weight_limit, initial_soln, amount)\n  print(paste(\"Initial Solution:\"))\n  print(initial_soln)\n\n  base_soln = initial_soln\n  base_val = initial_investment_amount\n  counter = 0\n\n  # solution vs available\n  cat(paste(\"Initial investment amount is : \", base_val, \"\\n\"))\n  global_val = base_val\n  global_solu = base_soln\n\n  for (i in 1:max_iterations) {\n    # Purterbation\n    next_soln = purterb_fn(base_soln)\n    next_val = evaluate_fn(stocks_data, weight_limit, next_soln, amount)\n    if(any(next_soln > min_investment) == FALSE){\n      return(0)\n    }else{\n      counter = counter + 1\n      if(next_val > base_val){\n        base_solu = next_soln\n        base_val = next_val\n      }\n      else{\n        # Accept with acceptence probability\n        acceptance_prob = runif(1, 0, 1)\n        if(acceptance_prob > 0.5){\n          base_soln = next_soln\n          base_val = next_val\n        }\n      }\n    }\n    if(global_val <= base_val){\n      global_val = base_val\n      global_solu = base_soln\n    }\n    i = counter\n    # solution\n    cat(\"Returns in \", i, \"iteration is : \", base_val,\"\\n\")\n  }\n  cat(\"\\n\",\"Returns in \", i, \"iteration is : \", global_val,\"global_val:\",global_solu,\"\\n\")\n\n\n  print(paste(\"Simulated Anealing - Portfolio Optimization\"))\n  print(paste(\"Simulation Iteration:\", max_iterations))\n  print(\"Top stocks return data:\")\n  print(stocks_data)\n  print(paste(\"Optimized Stock Allocation:\"))\n  print(round(global_solu,2))\n  print(\"Invested Period:\")\n  print(invest_period)\n  print(paste(\"portfolio return:\", round(global_val,2)))\n  portfolio_return_in_percentage = round(((global_val/amount)*100),2)\n  print(paste(\"portfolio return in percentage:\",portfolio_return_in_percentage ))\n\n  return(list(global_solu, global_val))\n}\n\nexecute_main_fn = function(stocks_data, max_iterations, amount){\n  set.seed(1234)\n  solution_list = run_simulated_annealing_algo(max_iterations, amount)\n  final_solution = as.numeric(solution_list[[1]])\n  final_solution_value = solution_list[[2]]\n  stocks_data$finalSolution = final_solution\n\n  cat(\"Total returns = \", final_solution_value,\"\\n\")\n  return(stocks_data)\n}\n\nresult = execute_main_fn(stocks_data, max_iterations = 100000, amount = 150000)\nprint(\"SIMULATED ANNEALING OPTIMIZATION SOLUTIONS\")\nprint(result)\n\n###############################################################################################\n# OUTPUT\n# Returns in  10000 iteration is :  76443.23 global_val: 0.3295739 0.1944862 0.1980905 0.1018766 0.1759728\n# [1] \"Simulated Anealing - Portfolio Optimization\"\n# [1] \"Simulation Iteration: 10000\"\n# [1] \"Top stocks return data:\"\n# stocks returns\n# MOTHERSUMI MOTHERSUMI   55.98\n# BAJFINANCE BAJFINANCE   54.34\n# SHREECEM     SHREECEM   47.91\n# BRITANNIA   BRITANNIA   47.14\n# TORNTPHARM TORNTPHARM   40.49\n# [1] \"Optimized Stock Allocation:\"\n# [1] 0.33 0.19 0.20 0.10 0.18\n# [1] \"Invested Period:\"\n# [1] 5\n# [1] \"portfolio return: 76443.23\"\n# [1] \"portfolio return in percentage: 50.96\"\n# Total returns =  76443.23\n\n###############################################################\n# Returns in  1e+05 iteration is :  76946.61 global_val: 0.3328701 0.2335364 0.1016767 0.1219498 0.209967\n# [1] \"Simulated Anealing - Portfolio Optimization\"\n# [1] \"Simulation Iteration: 1e+05\"\n# [1] \"Top stocks return data:\"\n# stocks returns\n# MOTHERSUMI MOTHERSUMI   55.98\n# BAJFINANCE BAJFINANCE   54.34\n# SHREECEM     SHREECEM   47.91\n# BRITANNIA   BRITANNIA   47.14\n# TORNTPHARM TORNTPHARM   40.49\n# [1] \"Optimized Stock Allocation:\"\n# [1] 0.33 0.23 0.10 0.12 0.21\n# [1] \"Invested Period:\"\n# [1] 5\n# [1] \"portfolio return: 76946.61\"\n# [1] \"portfolio return in percentage: 51.3\"\n# Total returns =  76946.61\n#\n#\n# [1] \"SIMULATED ANNEALING OPTIMIZATION SOLUTIONS\"\n# > print(result)\n# stocks returns finalSolution\n# MOTHERSUMI MOTHERSUMI   55.98     0.3328701\n# BAJFINANCE BAJFINANCE   54.34     0.2335364\n# SHREECEM     SHREECEM   47.91     0.1016767\n# BRITANNIA   BRITANNIA   47.14     0.1219498\n# TORNTPHARM TORNTPHARM   40.49     0.2099670\n#\n###############################################################################################\n",
    "created" : 1489208132338.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "409747276",
    "id" : "E6E78DCA",
    "lastKnownWriteTime" : 1489208446,
    "last_content_update" : 1489208446149,
    "path" : "~/INSOFE_CPEE/project/source_code/com.insofe.stock/R/OptimizationSimulatedAnnealing.R",
    "project_path" : "R/OptimizationSimulatedAnnealing.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}