if (plot)
plot(ts_forecast)
ts_forecast
}
display_residual = function(model) {
tsdisplay(residuals(model))
}
box_test = function(model, lag=16, fitdf=4, type="Ljung") {
box_test = Box.test(residuals(model), lag=lag, fitdf=fitdf, type=type)
box_test
}
run_box_test = function(model) {
p_val = 100
lag = 1
pvalues = array()
for(j in 1:min(20)) {
pvalues[j] <- Box.test(residuals(model), type="Ljung-Box", lag=j)$p.value
val = as.numeric(pvalues[j])
if ( (val < p_val) && (val > 0))  {
p_val = val
lag = j
}
}
return (list("p"= p_val,"lag"=lag))
}
eval_results = function(arima_model,forecast_arima,stock_test_data,row_idx=1) {
# plot residuals - TODO
display_residual(arima_model)
# Run Box-Test and Identify lag for small p-value
res_box_test = run_box_test(arima_model)
sprintf("Box-Test Result: small p-value:%f found at lag=%d",res_box_test$p,res_box_test$lag)
# Run box-Ljunk test
#run_box_test(arima_model, lag = lag)
acc = accuracy(forecast_arima, stock_test_data$adjclose)
print(acc)
aic = arima_model$aic
res=arima_model$residuals
p_value = res_box_test$p
sprintf("AIC=%f ",aic)
print(aic)
#row_idx = row_idx+1
result$TrainMAPE[row_idx] = acc[1,5]
result$TestMAPE[row_idx] = acc[2,5]
result$AIC[row_idx] = aic
result$Pvalue[row_idx] = res_box_test$p
result$lag[row_idx] = res_box_test$lag
result
}
# Include library
library(zoo) # imputation - last observed carry forward.
library(dplyr)
# Loading CSV File
load_csv = function(script_path) {
# 1. Read the data into R
raw_stock_data = read.csv(script_path, header = T)
# 2. Look at the summary of all the variables and convert the following variables as factors
summary(raw_stock_data)
str(raw_stock_data)
raw_stock_data
}
# Extract data and adj close price
extract_stock_adjclose_sorted = function(raw_stock_data) {
stock_dates = raw_stock_data$Date
stock_prices = raw_stock_data$Adj.Close
stocks_data = data.frame(as.Date(stock_dates),stock_prices)
colnames(stocks_data) <- c("date","adjclose")
tmp_stocks_data <- stocks_data[order(stocks_data$date),]
#str(tmp_stocks_data$date)
#str(tmp_stocks_data$adjclose)
#View(tmp_stocks_data)
#stocks_data=tmp_stocks_data
tmp_stocks_data
}
# Imputation Function
# 1. Generate continous stock price including weekends
# 2. Impute Missing stock price value for week ends with Friday adjclose price
impute_stock_data = function(stocks_data, from = as.Date("2012/01/02"),to=as.Date("2016/12/31"))
{
# Generate Continues data from 2012-2016, including market holiday for smooth TS processing
continous_dates= (seq(from=from, to=to, by="day"))
continous_adjclose = seq(from=0,to=0, by = 1)
continous_stocks_data = data.frame(continous_dates,continous_adjclose)
colnames(continous_stocks_data) = c("date","adjclose")
#str(continous_stocks_data)
merged_stock_data = merge(continous_stocks_data,stocks_data, by="date",all.x = TRUE )
stock_data = data.frame(merged_stock_data$date, merged_stock_data$adjclose.y )
# Impute stock price NA on weekends with last obersered values such as Friday
imputed_stocks_data = na.locf(stock_data)
colnames(imputed_stocks_data) = c("date","adjclose")
stock_data = data.frame(as.Date(imputed_stocks_data$date),
as.numeric(imputed_stocks_data$adjclose))
colnames(stock_data) = c("date","adjclose")
#View(stock_data)
stock_data
}
proc_stock_data = function (path ) {
csv_file =load_csv(path)
stock_data = extract_stock_adjclose_sorted(csv_file)
imputed_stock_data = impute_stock_data(stock_data)
imputed_stock_data
}
proc_stock_test_data = function (path,from =as.Date("2017/01/02"),to=as.Date("2017/01/31") ) {
csv_file =load_csv(path)
stocks_data = extract_stock_adjclose_sorted(csv_file)
imputed_stock_data = impute_stock_data(stocks_data,from =from,to=to)
imputed_stock_data
}
#stock_data("/home/tparamas/INSOFE_CPEE/project/BSE100/ITC.csv")
# Name:
# Batch No:
# Dis
# nnetar
# arimax
#
############################  MAIN PROGRAM ###########################
rm(list=ls(all=TRUE))
# Loading Library
library(fpp)
# TODO: change it to absolute path of com.insofe.stock/R
#path = "/home/tparamas/INSOFE_CPEE/project/source_code/com.insofe.stock/R"
wd = paste(getwd(),"R",sep="/")
setwd(wd)
print(getwd())
# Include source from R files
source("preprocess.R")
source("timeseries.R")
src_path = paste(getwd(),"data",sep="/")
# Script return calculator
script_return = data.frame(matrix(c(1,2,3,4,5),nrow=20,ncol=5))
colnames(script_return) =  c("script", "buy_price","curr_price",
"CARG","invest_period" )
all_script_list = c("BAJFINANCE.csv", "CADILAHC.csv", "HDFC.csv", "IOC.csv", "LT.csv",
"RELIANCE.csv", "TATAMOTORS.csv", "TITAN.csv", "BHARATFORG.csv",
"HAVELLS.csv", "HINDZINC.csv", "ITC.csv", "MOTHERSUMI.csv",
"SHREECEM.csv", "TORNTPHARM.csv", "BRITANNIA.csv", "HDFCBANK.csv", "INFY.csv",
"PIDILITIND.csv", "TCS.csv")
script_list = c("TCS.csv","HDFC.csv", "HDFCBANK.csv","INFY.csv","BRITANNIA.csv" )
#jpeg('rplot.jpeg')
all_script_list = c("HINDZINC.csv")
# Script forecast calculator
#script_forecast = data.frame(matrix(c(1,2,3,4,5),nrow=20,ncol=5))
#colnames(script_return) =  c("script", "buy_price","curr_price","invest_period", "CARG")
h=5
invest_period = 5
idx = 0
for(script in all_script_list) {
idx = idx + 1
script_path = paste(src_path,script,sep="/")
row_idx=1
# For Strong Model metrics
result = data.frame(matrix(c(0),nrow=3,ncol=5 ))
colnames(result) = c("TrainMAPE","TestMAPE", "AIC","Pvalue","lag")
rownames(result) = c("Arima","AutoArima", "HoltWinter")
# For storing forecast metrics
res_forecast = data.frame(matrix(c(0),nrow=h,ncol=5))
colnames(res_forecast) = c("date", "actual", "arima", "auto_arima", "HoltWinter")
# 1. Load and Preprocess Stock Data
# Remove verbose
stock_data = proc_stock_data(script_path)
buy_price = stock_data[stock_data$date==as.Date("2012-01-02"),]$adjclose
print(buy_price)
curr_price = stock_data[stock_data$date==as.Date("2016-12-31"),]$adjclose
print(curr_price)
CARG = ((curr_price/buy_price)^(1/invest_period)-1)*100
script_name = strsplit(script,".csv")[[1]]
script_return$script[idx] = script_name
script_return$buy_price[idx] = buy_price
script_return$curr_price[idx] = curr_price
script_return$invest_period[idx] = invest_period
script_return$CARG[idx] = CARG
#//proc_stock_data = stock_data
#. 2. Get TS data format
stock_ts = stock_data_ts(stock_data, 365)
stock_ts_decom(stock_ts, TRUE)
plot_acf_pacf(stock_ts)
#  ndiffs() -Arima-order diff
# To determine the appropriate number of first differences required for a non-seasonal TS.
ndiff_valaue= ndiffs(stock_ts)
# Arima - seasonal diff component.
# determining whether seasonal differencing is required is nsdiffs()
nsdiff = nsdiffs(stock_ts)
stock_ts_diff1= stock_ts_diff(stock_ts, diff=ndiff_valaue, plot=TRUE)
plot_acf_pacf(stock_ts_diff1)
############## Prepare Test Data ####################
stock_test_data = proc_stock_test_data(script_path,
from =as.Date("2017/01/02"),
to=as.Date("2017/01/06"))
res_forecast$actual = stock_test_data$adjclose
res_forecast$date = stock_test_data$date
######################## RUN MODELS #########################################################
######################## 1. Run manual arima model ##########################################
arima_model = run_manual_arima(stock_ts,
order = c(0,ndiff_valaue,0),
seasonal = c(0,nsdiff,0) )
arima_model
forecast_arima = model_forecast(object = arima_model,h=h)
forecast_arima
res_forecast$arima = forecast_arima$mean#$upper[,2]
# plot residuals - TODO
display_residual(arima_model)
# Run Box-Test and Identify lag for small p-value
res_box_test = run_box_test(arima_model)
sprintf("Box-Test Result: small p-value:%f found at lag=%d",res_box_test$p,res_box_test$lag)
acc = accuracy(forecast_arima, stock_test_data$adjclose)
#print(acc)
#aic = arima_model$aic
#res=arima_model$residuals
#p_value = res_box_test$p
#sprintf("AIC=%f ",aic)
#print(aic)
result$TrainMAPE[row_idx] = acc[1,5]
result$TestMAPE[row_idx] = acc[2,5]
result$AIC[row_idx] = arima_model$aic
result$Pvalue[row_idx] = res_box_test$p
result$lag[row_idx] = res_box_test$lag
## TODO:To check residuals are normally distributed
#eval_results(arima_model,forecast_arima,stock_test_data,row_idx=1)
#############
auto_arima_model = run_auto_arima(stock_ts)
forecast_auto_arima = model_forecast(object = auto_arima_model,h=h)
res_forecast$auto_arima = forecast_auto_arima$mean #upper[,2]
# plot residuals - TODO
display_residual(forecast_auto_arima)
# Run Box-Test and Identify lag for small p-value
res_box_test = run_box_test(forecast_auto_arima)
sprintf("Box-Test Result: small p-value:%f found at lag=%d",res_box_test$p,res_box_test$lag)
acc = accuracy(forecast_auto_arima, stock_test_data$adjclose)
row_idx = row_idx + 1
result$TrainMAPE[row_idx] = acc[1,5]
result$TestMAPE[row_idx] = acc[2,5]
result$AIC[row_idx] = auto_arima_model$aic
result$Pvalue[row_idx] = res_box_test$p
result$lag[row_idx] = res_box_test$lag
#eval_results(auto_arima_model,forecast_arima,stock_test_data,row_idx=2)
stock_ts_freq7 = stock_data_ts(stock_data, freq=7 )
hw_mdl = hw(stock_ts_freq7,  seasonal = "additive")
summary(hw_mdl)
forecast_hw = model_forecast(object = hw_mdl,h=h)
forecast_hw
res_forecast$HoltWinter = forecast_hw$mean#$upper[,2]
# plot residuals - TODO
display_residual(hw_mdl)
# Run Box-Test and Identify lag for small p-value
res_box_test = run_box_test(hw_mdl)
sprintf("Box-Test Result: small p-value:%f found at lag=%d",res_box_test$p,res_box_test$lag)
acc = accuracy(forecast_hw, stock_test_data$adjclose)
row_idx = row_idx + 1
result$TrainMAPE[row_idx] = acc[1,5]
result$TestMAPE[row_idx] = acc[2,5]
result$AIC[row_idx] = hw_mdl$model$aic
result$Pvalue[row_idx] = res_box_test$p
result$lag[row_idx] = res_box_test$lag
#eval_results(hw_mdl,forecast_arima,stock_test_data,row_idx=2)
sprintf("############################# %s ################################",script)
print("Model Metrics")
print(result)
print("Forecast Metrics")
print(res_forecast)
sprintf("#################################################################")
}
#####
print("script_return")
print(script_return)
library(fpp)
wd = paste(getwd(),"R",sep="/")
setwd(wd)
print(getwd())
source("preprocess.R")
source("timeseries.R")
wd = paste(getwd(),"R",sep="/")
setwd(wd)
wd = paste(getwd(),"R",sep="/")
wd
rm(list=ls(all=TRUE))
library(fpp)
path = "/home/tparamas/INSOFE_CPEE/project/source_code/com.insofe.stock/R"
wd = paste(path,"R",sep="/")
setwd(wd)
setwd(wd)
setwd(path)
print(getwd())
source("preprocess.R")
source("timeseries.R")
src_path = paste(getwd(),"data",sep="/")
script_return = data.frame(matrix(c(1,2,3,4,5),nrow=20,ncol=5))
colnames(script_return) =  c("script", "buy_price","curr_price",
"CARG","invest_period" )
script_list = c("TCS.csv","HDFC.csv", "HDFCBANK.csv","INFY.csv","BRITANNIA.csv" )
all_script_list = c("HINDZINC.csv")
h=5
invest_period = 5
idx = 0
script="ITC.csv"
idx = idx + 1
script_path = paste(src_path,script,sep="/")
row_idx=1
result = data.frame(matrix(c(0),nrow=3,ncol=5 ))
colnames(result) = c("TrainMAPE","TestMAPE", "AIC","Pvalue","lag")
rownames(result) = c("Arima","AutoArima", "HoltWinter")
res_forecast = data.frame(matrix(c(0),nrow=h,ncol=5))
colnames(res_forecast) = c("date", "actual", "arima", "auto_arima", "HoltWinter")
stock_data = proc_stock_data(script_path)
buy_price = stock_data[stock_data$date==as.Date("2012-01-02"),]$adjclose
print(buy_price)
curr_price = stock_data[stock_data$date==as.Date("2016-12-31"),]$adjclose
print(curr_price)
CARG = ((curr_price/buy_price)^(1/invest_period)-1)*100
script_name = strsplit(script,".csv")[[1]]
script_return$script[idx] = script_name
script_return$buy_price[idx] = buy_price
script_return$curr_price[idx] = curr_price
script_return$invest_period[idx] = invest_period
script_return$CARG[idx] = CARG
stock_ts = stock_data_ts(stock_data, 365)
stock_ts_decom(stock_ts, TRUE)
stock_ts = stock_data_ts(stock_data, 365)
stock_ts = stock_data_ts(stock_data, 365)
stock_ts_decom(stock_ts, TRUE)
plot_acf_pacf(stock_ts)
ndiff_valaue= ndiffs(stock_ts)
nsdiff = nsdiffs(stock_ts)
stock_ts_diff1= stock_ts_diff(stock_ts, diff=ndiff_valaue, plot=TRUE)
plot_acf_pacf(stock_ts_diff1)
stock_test_data = proc_stock_test_data(script_path,
from =as.Date("2017/01/02"),
to=as.Date("2017/01/06"))
res_forecast$actual = stock_test_data$adjclose
res_forecast$date = stock_test_data$date
arima_model = run_manual_arima(stock_ts,
order = c(0,ndiff_valaue,0),
seasonal = c(0,nsdiff,0) )
arima_model
forecast_arima = model_forecast(object = arima_model,h=h)
forecast_arima
res_forecast$arima = forecast_arima$mean#$upper[,2]
display_residual(arima_model)
res_box_test = run_box_test(arima_model)
sprintf("Box-Test Result: small p-value:%f found at lag=%d",res_box_test$p,res_box_test$lag)
acc = accuracy(forecast_arima, stock_test_data$adjclose)
result$TrainMAPE[row_idx] = acc[1,5]
result$TestMAPE[row_idx] = acc[2,5]
result$AIC[row_idx] = arima_model$aic
result$Pvalue[row_idx] = res_box_test$p
result$lag[row_idx] = res_box_test$lag
auto_arima_model = run_auto_arima(stock_ts)
forecast_auto_arima = model_forecast(object = auto_arima_model,h=h)
res_forecast$auto_arima = forecast_auto_arima$mean #upper[,2]
display_residual(forecast_auto_arima)
res_box_test = run_box_test(forecast_auto_arima)
sprintf("Box-Test Result: small p-value:%f found at lag=%d",res_box_test$p,res_box_test$lag)
acc = accuracy(forecast_auto_arima, stock_test_data$adjclose)
row_idx = row_idx + 1
result$TrainMAPE[row_idx] = acc[1,5]
result$TestMAPE[row_idx] = acc[2,5]
result$AIC[row_idx] = auto_arima_model$aic
result$Pvalue[row_idx] = res_box_test$p
result$lag[row_idx] = res_box_test$lag
stock_ts_freq7 = stock_data_ts(stock_data, freq=7 )
hw_mdl = hw(stock_ts_freq7,  seasonal = "additive")
summary(hw_mdl)
forecast_hw = model_forecast(object = hw_mdl,h=h)
forecast_hw
res_forecast$HoltWinter = forecast_hw$mean#$upper[,2]
display_residual(hw_mdl)
res_box_test = run_box_test(hw_mdl)
sprintf("Box-Test Result: small p-value:%f found at lag=%d",res_box_test$p,res_box_test$lag)
acc = accuracy(forecast_hw, stock_test_data$adjclose)
row_idx = row_idx + 1
result$TrainMAPE[row_idx] = acc[1,5]
result$TestMAPE[row_idx] = acc[2,5]
result$AIC[row_idx] = hw_mdl$model$aic
result$Pvalue[row_idx] = res_box_test$p
result$lag[row_idx] = res_box_test$lag
sprintf("############################# %s ################################",script)
print("Model Metrics")
print(result)
print("Forecast Metrics")
print(res_forecast)
sprintf("#################################################################")
print(script_return)
library(prophet)
library(dplyr)
str(stock_data)
m <- prophet(stock_data_ts)
stock_data_ts
m <- prophet(stock_data_ts)
df <- read.csv('../examples/example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('/home/tparamas/INSOFE_CPEE/project/refs/example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('/home/tparamas/INSOFE_CPEE/project/example_wp_peyton_manning.csv') %>%
mutate(y = log(y))
df <- read.csv('/home/tparamas/INSOFE_CPEE/project/example_wp_peyton_manning.csv') %>%  mutate(y = log(y))
df <- read.csv('/home/tparamas/INSOFE_CPEE/project/example_wp_peyton_manning.csv')
str(df)
View(df)
df <- read.csv('/home/tparamas/INSOFE_CPEE/project/example_wp_peyton_manning.csv')
str(df)
View(df)
df <- read.csv('/home/tparamas/INSOFE_CPEE/project/example_wp_peyton_manning.csv') %>%  mutate(y = log(y))
str(df)
View(df)
m <- prophet(df)
future <- make_future_dataframe(m, periods = 365)
tail(future)
future$ds
str(df)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
prophet_plot_components(m, forecast)
stock_data
df=stock_data
m <- prophet(df)
edit stock_data
stock_data
View(df <- read.csv('/home/tparamas/INSOFE_CPEE/project/example_wp_peyton_manning.csv') %>%  mutate(y = log(y)))
View(stock_data)
data.frame("")
df=stock_data
colnames(df) = c("df","y")
m <- prophet(df)
colnames(df) = c("ds","y")
m <- prophet(df)
future <- make_future_dataframe(m, periods = 365)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
prophet_plot_components(m, forecast)
print(res_forecast)
future <- make_future_dataframe(m, periods = 7)
tail(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
rm(list=ls(all=TRUE))
dataset = data.frame(item = c("pocketknife", "beans", "potatoes",
"onions", "phone", "lemons",
"sleeping bag", "rope", "compass",
"umbrella", "sweater", "medicines", "others"),
survivalpoints = c(15, 16, 13, 14, 20, 12, 17,
18, 17, 19, 10, 12, 11),
weight = c( 5, 6, 3, 4, 11, 2, 7,
8, 10, 9, 1, 12, 11))
sum(dataset$survivalpoints)
sum(dataset$weight)
weightlimit = 80
MaxPossiblesurvivalpoints = sum(dataset$survivalpoints)
InitPopSize = 100
initPop = as.data.frame(setNames(replicate(nrow(dataset),
numeric(0),
simplify = F),
dataset$item))
initPop
class(initPop)
dim(initPop)
set.seed(1234)
for (i in 1:InitPopSize){
#set.seed(seeds[i])
chromosome = sample(0:1, nrow(dataset), replace=TRUE)
initPop[i,]= chromosome
length(initPop[i,])
}
return(initPop)
initPop
x= dataset
x =initPop
x %*% dataset$survivalpoints
x
x=initPop
x %*% dataset$survivalpoints
current_solution_survivalpoints = x %*% dataset$survivalpoints
dataset$survivalpoints
current_solution_weight = x %*% dataset$weight
#We define the Objective function as follows.
fnEvaluate = function(x){
current_solution_survivalpoints = x %*% dataset$survivalpoints
current_solution_weight = x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0)
else
return(current_solution_survivalpoints)
}
# mutation : pick one position and change the value to 0 or 1 as the case may be
fnMutate = function(individual){
#change one value to the other value 1 to 0 or o0 to 1
a = sample(1:length(individual),1)
individual[a]=1-individual[a]
return(individual)
}
a
# Crossover : randomly select a point and swap the tails
fnCrossOver = function(p1, p2){
a = sample(2:(length(p1)-2), 1)
p11 = c(p1[1:a], p2[(a+1):length(p2)])
p12 = c(p2[1:a], p1[(a+1):length(p1)])
return(list(p11,p12))
}
# mutation : pick one position and change the value to 0 or 1 as the case may be
fnMutate = function(individual){
#change one value to the other value 1 to 0 or o0 to 1
a = sample(1:length(individual),1)
individual[a]=1-individual[a]
return(individual)
}
# Crossover : randomly select a point and swap the tails
fnCrossOver = function(p1, p2){
a = sample(2:(length(p1)-2), 1)
p11 = c(p1[1:a], p2[(a+1):length(p2)])
p12 = c(p2[1:a], p1[(a+1):length(p1)])
return(list(p11,p12))
}
